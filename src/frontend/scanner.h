// Generated by Flexc++ V2.10.01 on Sat, 13 Jul 2024 14:51:49 +0800

#ifndef Scanner_H_INCLUDED_
#define Scanner_H_INCLUDED_

#include <iostream>

// $insert baseclass_h
#include "errormsg.h"
#include "scannerbase.h"

// $insert classHead
class Scanner : public ScannerBase {
public:
  Scanner() = delete;
  explicit Scanner(std::string_view fname, std::ostream &out = std::cout)
      : ScannerBase(std::cin, out), errmsg_(fname) {
    switchStreams(errmsg_.fstream_, out);
  }

  Scanner(std::string const &infile, std::string const &outfile);

  // $insert lexFunctionDecl
  int lex();
  int getPos();
  int getLine();

private:
  int lex_();
  int executeAction_(size_t ruleNr);

  void print();
  void preCode(); // re-implement this function for code that must
                  // be exec'ed before the patternmatching starts

  void postCode(PostEnum_ type);
  // re-implement this function for code that must
  // be exec'ed after the rules's actions.
  void adjust();
  int commentLevel_ = 0;
  tiger::Errormsg errmsg_;
};

// $insert inlineLexFunction
inline int Scanner::lex() { return lex_(); }

inline void Scanner::preCode() {
  // optionally replace by your own code
}

inline void Scanner::postCode([[maybe_unused]] PostEnum_ type) {
  // optionally replace by your own code
}

inline void Scanner::print() { print_(); }

inline int Scanner::getPos() { return errmsg_.pos_; }

inline int Scanner::getLine() { return errmsg_.line_; }

inline void Scanner::adjust() { errmsg_.newWord(length()); }

#endif // Scanner_H_INCLUDED_
